# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  desc "Initialize telegram credentials"
  lane :set_telegram_creds do |options|
    ENV["TELEGRAM_TOKEN"] = options[:token]
    ENV["TELEGRAM_CHAT_ID"] = options[:chat_id]
  end

  desc "Build debug version of application with incrementing version code of app"
  lane :build do
    increment_version_code(app_project_dir: 'app')
    gradle(task: "--stacktrace assemble", build_type: "Debug")
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "--stacktrace testDebugUnitTest")
  end

  lane :sign_aab_lane do |options|
      gradle(task: "clean")
      gradle(
        task: "--stacktrace bundle",
        build_type: options[:type],
        properties: {
            "android.injected.signing.store.file" => options[:keystore_path],
            "android.injected.signing.store.password" => options[:store_password],
            "android.injected.signing.key.alias" => options[:key_alias],
            "android.injected.signing.key.password" => options[:key_password]
        }
      )
  end

  lane :sign_apk_lane do |options|
      gradle(task: "clean")
      gradle(
        task: "--stacktrace assemble",
        build_type: options[:type],
        properties: {
            "android.injected.signing.store.file" => options[:keystore_path],
            "android.injected.signing.store.password" => options[:store_password],
            "android.injected.signing.key.alias" => options[:key_alias],
            "android.injected.signing.key.password" => options[:key_password]
        }
      )
  end

  desc "Submit a new Beta Build to Firebase App Distribution"
  lane :stage do |options|
      commit = last_git_commit
      if options[:branch] != "develop" and commit[:message].downcase.include? "#upload" or options[:branch] == "master"
        release_type = "Release"

        commit_notes = ""
        if(options[:branch] == "master")
          commit_notes = "Release candidate. #{commit[:message]}"
        else
          commit_notes = commit[:message].sub("#upload ", "")
        end

        # Upload build to Firebase
        sign_apk_lane(
          type: release_type,
          keystore_path: options[:keystore_path],
          store_password: options[:store_password],
          key_alias: options[:key_alias],
          key_password: options[:key_password]
        )

        publish_to_firebase(
          branch: options[:branch],
          notes: commit_notes,
          author: commit[:author],
          app_id: options[:app_id],
          firebase_token: options[:firebase_token]
        )

      end
    end

  lane :publish_to_firebase do |options|
      # upload to Firebase App Distribution

        build_notes = "Branch: #{options[:branch]}. Notes: #{options[:notes]}. Built by #{options[:author]}"
        sh("cd .. && touch changelog.txt")
        File.write("./changelog.txt", build_notes)

        firebase_app_distribution(
           app: "#{options[:app_id]}",
           groups: "hedbanz-test-group",
           release_notes: build_notes,
           apk_path: "app/build/outputs/apk/release/app-release.apk",
           firebase_cli_token: "#{options[:firebase_token]}"
        )

        telegramMessage("Build <b>№#{ENV['CIRCLE_BUILD_NUM']}</b> was successfully uploaded to <b>Firebase App distribution</b>, congratulations!.
                Build info: <b>#{buildInfo}</b>")
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy_aab do |options|
    supply(
      track: "beta",
      aab:options[:path],
      mapping:options[:mapping]
    )

    telegramMessage( "New Android build № #{ENV['CIRCLE_BUILD_NUM']} was successfully published to Google Play beta!
                          Congratulations! Build info: <b>#{buildInfo}</b>")
  end

  error do |lane, exception|
    telegramMessage("<b>Build №#{ENV['CIRCLE_BUILD_NUM']}</b>: FAILED
    <b>Circle Ci job</b>: #{ENV['CIRCLE_JOB']}.
    <b>Branch:</b> #{ENV['CIRCLE_BRANCH']}.
    <b>Build info:</b> #{buildInfo}.

    <i>Additional info here:</i> #{ENV['CIRCLE_BUILD_URL']}")
  end

  def buildInfo
    "Build version #{get_version_name(app_project_dir: '**/app')} (#{get_version_code(app_project_dir: '**/app')})"
  end

  def telegramMessage(message)
    require 'net/http'

    uri = URI.parse("https://api.telegram.org/bot#{ENV["TELEGRAM_TOKEN"]}/sendMessage")
    response = Net::HTTP.post_form(uri, {:chat_id => ENV["TELEGRAM_CHAT_ID"], :text => message, :parse_mode => "HTML"})
  end
end


